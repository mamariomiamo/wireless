#!/usr/bin/env python3
from __future__ import division
import unittest
from mavros_msgs.srv import CommandBool, ParamGet, ParamSet, SetMode, SetModeRequest, WaypointClear, CommandLong
from six.moves import xrange
import rospy
from std_msgs.msg import Bool


class MavrosWatcher(unittest.TestCase):
    def __init__(self, *args):
        super(MavrosWatcher, self).__init__(*args)
        # ROS services
        service_timeout = 10
        rospy.loginfo("waiting for ROS services")
        uav_id = rospy.get_param("uav_id")
        print("my_id is ",uav_id)
        service_name = '/'+uav_id + '/mavros/cmd/command'
        wifi_connected = '/' +uav_id + '/connected'
        print(service_name)
        print(wifi_connected)
        #try:
            # rospy.wait_for_service(uav_id+'/mavros/param/get', service_timeout)
            # rospy.wait_for_service(uav_id+'/mavros/param/set', service_timeout)
            # rospy.wait_for_service(uav_id+'/mavros/cmd/arming', service_timeout)
        #    rospy.wait_for_service(service_name, service_timeout)
            # rospy.wait_for_service(uav_id+'/mavros/mission/push', service_timeout)
            # rospy.wait_for_service(uav_id+'/mavros/mission/clear', service_timeout)
            # rospy.wait_for_service(uav_id+'/mavros/set_mode', service_timeout)
        #    rospy.loginfo("ROS services are up")
        #except rospy.ROSException:
        #    self.fail("failed to connect to services")

        self.wifi_status = Bool()

        self.set_arming_srv = rospy.ServiceProxy(uav_id+'/mavros/cmd/arming',
                                                 CommandBool)

        self.command_client = rospy.ServiceProxy(service_name, CommandLong)

        self.set_mode_srv = rospy.ServiceProxy(uav_id+'mavros/set_mode', SetMode)

        self.wifi_status_sub = rospy.Subscriber(wifi_connected, Bool,
                                          self.wifi_status_cb)

        

        self.reported = 0
        self.alarm = 0
        self.last_cb_time = 0.0
        self.cb_checker = 0.0

        self.timer = rospy.Timer(rospy.Duration(0.5),self.cb_timer)

    def cb_timer(self, event):
        self.cb_checker = rospy.get_time()
        print(self.cb_checker)
        print(self.last_cb_time)
        if(self.last_cb_time<1):
            self.last_cb_time = rospy.get_time()
        
        cb_interval = self.cb_checker - self.last_cb_time
        print(cb_interval)
        if cb_interval > 3:
            rospy.loginfo("disconnected")
            self.set_disarm(False,5)
        else:
            rospy.loginfo("all is well")
        
    def set_disarm(self, wifi_status, timeout):
        arm = wifi_status
        rospy.loginfo("setting FCU arm: {0}".format(arm))
        loop_freq = 1
        rate = rospy.Rate(loop_freq)
        arm_set = False

        for i in xrange(timeout * loop_freq):
            try:
                # commandCall = CommandLong()
                # commandCall.broadcast = False
                # commandCall.command = 400
                # commandCall.confirmation = True
                # commandCall.param1 = 0.0
                # commandCall.param2 = 21196.0
                # commandCall.param3 = 0.0
                # commandCall.param4 = 0.0
                # commandCall.param5 = 0.0
                # commandCall.param6 = 0.0
                # commandCall.param7 = 0.0
                self.command_client(False,400,1,0,21196,0,0,0,0,0)
                # res = self.set_arming_srv(arm)
                # if not res.success:
                #     rospy.logerr("failed to send arm command")
            except rospy.ServiceException as e:
                rospy.logerr(e)

            try:
                rate.sleep()
            except rospy.ROSException as e:
                self.fail(e)

        # for i in xrange(timeout * loop_freq):
        #     if self.state.armed == arm:
        #         arm_set = True
        #         rospy.loginfo("set arm success | seconds: {0} of {1}".format(
        #             i / loop_freq, timeout))
        #         break
        #     else:
        #         try:
        #             res = self.set_arming_srv(arm)
        #             if not res.success:
        #                 rospy.logerr("failed to send arm command")
        #         except rospy.ServiceException as e:
        #             rospy.logerr(e)

        #     try:
        #         rate.sleep()
        #     except rospy.ROSException as e:
        #         self.fail(e)

    def wifi_status_cb(self,data):
        self.wifi_status = bool(data.data)
        self.last_cb_time = rospy.get_time()
        print(self.last_cb_time)
        if(not self.reported):
           #rospy.loginfo("ROS services are up")
           rospy.loginfo("wifi status is " + str(self.wifi_status))
           self.reported = 1
           self.alarm = 0
        self.wifi_status = bool(data.data)

        if not self.wifi_status:
            self.set_disarm(self.wifi_status,5)
            self.alarm = 1
        if(self.alarm):
           rospy.loginfo("wifi status is " + str(self.wifi_status))



if __name__ == '__main__':
    rospy.init_node('mavros_watcher', anonymous=True)
    mavros_wifi_monitor = MavrosWatcher()
    while not rospy.is_shutdown():
        rate = rospy.Rate(20)
        #rospy.spinOnce()
        rate.sleep()
    rospy.spin()
